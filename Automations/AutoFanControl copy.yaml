blueprint:
  name: Auto_Fan_Temperature_Control_for_3-Speed_Fan_2022-05-05
  source_url: https://github.com/SirGoodenough/HA_Blueprints/blob/master/Automations/AutoFanControl.yaml
  domain: automation
  homeassistant:
    min_version: 2022.5.0
  input:
    fan_control:
      name: Toggle to turn the fan function off for when away or seasonally
      description: 'input_boolean - If this is set to off, the Automation 
        will be disabled.'
      selector:
        entity:
          domain: input_boolean
          multiple: false
    room_temp_now:
      name: Room Temperature Sensor
      selector:
        entity:
          domain: sensor
          multiple: false
    room_set_temp:
      name: Room Target Temperature
      selector:
        entity:
          domain: input_number
          multiple: false
    temp_gap:
      name: Temp Hysteresis
      default: 1.3
      selector:
        number:
          min: 0.0
          max: 7.0
          unit_of_measurement: Degrees
          mode: slider
          step: 0.1
    temp_gap_1_to_2:
      name: Temp Gap between Low and Medium
      default: 4.5
      selector:
        number:
          min: 1.0
          max: 20.0
          unit_of_measurement: Degrees
          mode: slider
          step: 0.1
    temp_gap_2_to_3:
      name: Temp Gap between Medium and High
      default: 2.0
      selector:
        number:
          min: 1.0
          max: 20.0
          unit_of_measurement: Degrees
          mode: slider
          step: 0.1
    fan_on_time:
      name: Time of day fan should start
      description: Set this for the time of day you want the fan function to be enabled.
      selector:
        time: 
    fan_off_time:
      name: Time of day fan should stop
      description: Set this for the time of day you want the fan function to end.
      selector:
        time: 
    mqtt_fan_topic:
      name: Fan Topic
      selector:
        text: {}
variables:
  temp_gap_var: !input 'temp_gap'
  temp_gap_1_to_2_var: !input 'temp_gap_1_to_2'
  temp_gap_2_to_3_var: !input 'temp_gap_2_to_3'
  room_temp_now_var: !input 'room_temp_now'
  room_set_temp_var: !input 'room_set_temp'
  room_temp_now_val: '{{ expand(room_temp_now_var)[0].state | float(0) }}'
  room_set_temp_val: '{{ expand(room_set_temp_var)[0].state | float(0) - temp_gap_var | float(0) }}'
mode: restart
trigger:
- platform: state
  id: go_on_any_sensor_temp_changes
  entity_id: !input 'room_temp_now'
- platform: state
  id: go_on_any_set_temp_changes
  entity_id: !input 'room_set_temp'
- platform: time
  id: go_if_the_start_time_occurs
  at: !input 'fan_on_time'
- platform: state
  id: go_if_the_control_is_switched_on
  entity_id: !input 'fan_control'
  to: 'on'
- platform: time
  id: go_if_the_stop_time_occurs
  at: !input 'fan_off_time'
- platform: state
  id: go_if_the_control_is_switched_off
  entity_id: !input 'fan_control'
  to: 'off'
action:
- choose:
  - alias: Fan normal turn off sequence
    conditions:
      or:
      - alias: Time limit has been reached
        condition: trigger
        id: go_if_the_stop_time_occurs
      - alias: The automation has been disabled
        condition: trigger
        id: go_if_the_control_is_switched_off
    sequence:
    - alias: Stop the fan
      service: mqtt.publish
      data:
        topic: !input 'mqtt_fan_topic'
        payload: 0
        qos: 1
        retain: false
  - alias: Normal fan run sequence
    conditions:
      and:
      - alias: Make sure the Fan is enabled
        condition: state
        entity_id: !input 'fan_control'
        state: 'on'
      - alias: Only allow execution within selected hours
        condition: time
        after: !input 'fan_on_time'
        before: !input 'fan_off_time'
    sequence:
    - service: mqtt.publish
      data:
        topic: !input 'mqtt_fan_topic'
        payload: >
          {% if room_temp_now_val < room_set_temp_val %}
          {# Room is cooler than set temp so turn fan OFF. #}
            0
          {% elif room_temp_now_val < (room_set_temp_val + temp_gap_1_to_2_var) %}
          {# Room is at the temp where the fan should be at LOW speed. #}
            1
          {% elif room_temp_now_val < (room_set_temp_val + temp_gap_1_to_2_var + temp_gap_2_to_3_var) %} 
          {# Room is at the temp where the fan should be at MEDIUM speed. #}
            2
          {% else %} 
          {# Room is warm enough to be on HIGH speed, #}
            3
          {% endif %}
        qos: 1
        retain: false
