# This is an action statement that you can use in your Blueprint Automation 
#  to call a script (below) to dim a light when rotating the cube.
#
# NOTE: More information on setting this up can be found in this thread:
#   https://community.home-assistant.io/t/zigbee2mqtt-aqara-magic-cube-t1-pro-ctp-r01-xiaomi-lumi-cagl02/525111/27
#
# In the blueprint automation:
#   https://my.home-assistant.io/redirect/automations/

rotate_cw_face_0:
  - service: script.cube_dimmer_control
    data:
      angle: '{{ trigger.event.data.args.relative_degrees | float(0.0)}}'
      light: light.bulb1
rotate_ccw_face_0:
  - service: script.cube_dimmer_control
    data:
      angle: '{{ trigger.event.data.args.relative_degrees | float(0.0)}}'
      light: light.bulb1

# Then this is the script that's called to do the heavy lifting.
#  It works for both CW and CCW cube rotations.
# Adjust the number (0.4) below to make the movement more
#  sensitive or less sensitive. (bigger = more sensitive)

# In the script integration:
#  https://my.home-assistant.io/redirect/scripts/

script:
  cube_dimmer_control:
    description: Template Dimmer Control
    fields:
      angle:
        name: Angle to represent new brightness
        description:
          This is the new angle to be used in the calculation for Brightness
        required: true
        example: "-120.7"
        selector:
          number:
            min: -360
            max: 360
            step: 0.1
            mode: box
      light:
        name: Light entity to control
        description: Add the light entity you want to control here
        required: true
        selector:
          entity:
            multiple: false
            domain: light
    sequence:
      - service: light.turn_on
        data:
          entity_id: "{{ light }}"
          brightness_pct: >-
            {% set step_size = angle * 0.4 %}
            {# Get brightness as a percent. #}
            {% set cb = (state_attr( light, 'brightness') | float(10) / 255.0) * 100.0 %}
            {% set new_brightness = cb | int(10) + step_size %}
            {% if new_brightness < 5 %}
              {# If it gets really low set to 0. Adjust if needed for your lights. #}
              0
            {% elif new_brightness <= 10 %}
              {# If it's not quite 0, set to a minimum working brightness. #}
              10
            {% elif 91 <= new_brightness < (90 + step_size) %}
              {# If it's almost full brightness, set to 100%. #}
              100
            {% else %}
              {# Send actual calculated value. #}
              {{ new_brightness }}
            {% endif %}
