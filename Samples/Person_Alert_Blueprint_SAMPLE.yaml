# Here is a way to push a persistant notification to your screen
#   that will sit for a short time. It is taylored to be part of
#   my Person Alert BP but with slight tweaking it could be used
#   for a lot of things. 

# Add to 'enter_action' and/or 'leave_action' and/or 'jump_action' inputs:  (YAML Mode)
enter_action:
  - service: script.personalert_notify
    data:
      person: '{{ trigger.to_state.attributes.friendly_name }}'
      place_to: '{{ trigger.to_state.state }}'
      place_from: '{{ trigger.from_state.state }}'
      notify_id: '{{ trigger.to_state.context.id }}'
      phase: enter
leave_action:
  - service: script.personalert_notify
    data:
      person: '{{ trigger.from_state.attributes.friendly_name }}'
      place_to: '{{ trigger.to_state.state }}'
      place_from: '{{ trigger.from_state.state }}'
      notify_id: '{{ trigger.from_state.context.id }}'
      phase: leave
jump_action:
  - service: script.personalert_notify
    data:
      person: '{{ trigger.to_state.attributes.friendly_name }}'
      place_to: '{{ trigger.to_state.state }}'
      place_from: '{{ trigger.from_state.state }}'
      notify_id: '{{ trigger.to_state.context.id }}'
      phase: jump

# Script being called
script:
  personalert_notify:
    alias: Person alert BP timed persistant_notification
    trace:
      stored_traces: 10
    fields:
      person:
        name: People to watch
        description:
          People Entity names to watch,
          Usually picked by the calling entity.
        required: false
        selector:
          entity:
            multiple: false
            domain: person
      place_to:
        name: Where you just arrived
        description:
          Place you are arriving at. Is generally one of your zones.
          Usually picked by the calling entity.
        required: false
        example: home
        selector:
          text:
            multiline: false
            type: text
      place_from:
        name: Where you are last from
        description:
          Place you left from. Is generally one of your zones.
          Usually picked by the calling entity.
        required: false
        example: school
        selector:
          text:
            multiline: false
            type: text
      notify_id:
        name: ID used to clear the notification
        description:
          This is a random text string that is used to clear the notification as needed.
          Usually picked by the calling entity.
        required: false
        example: 6681d33b-c9d7-4678-a6cd-bc4113571806
        selector:
          text:
            multiline: false
            type: text
      phase:
        name: Phase Action
        description:
          Type of action this resolves to.
          Usually picked by the calling entity.
        required: false
        selector:
          select:
            options:
              - enter
              - leave
              - jump
    variables:
        # Define variable data and provide defaults
      person: placeholder1
      place_to: placeholder2
      place_from: placeholder3
      notify_id: 3479f317-f314-43bb-9e20-d6168b14f78c
      phase: enter
      flip: >
        {% if phase == 'leave' %}
          They have left: {{ place_from }}
        {% elif phase == 'enter' %} 
          They are now located at: {{ place_to }}
        {% else %}
          They have left: {{ place_from }} and are now located at: {{ place_to }}
        {% endif %}


# Here is a way to push an audio message to your speakers
#   It is taylored to be part of my Person Alert BP but with slight 
#   tweaking it could be used for a lot of things.
# The speaker entities entry needs to be a device on your network.
# This is set-up with tts.cloud_say using Nabu-Casa, but
#   tts.google_translate_say and others would also work at no cost.
# Note that 'lang' (Language) and 'gend' (gender) or 'entities'
#   (entity_ids of media players) does not have to be pushed if 
#   you don't want to change it from the defaults set in the script.

# Add to 'enter_action' and/or 'leave_action' and/or 'jump_action' inputs:  (YAML Mode)
enter_action:
  - service: script.personalert_audio
    data:
      entities: media_player.intercom_group
      mess: '{{ trigger.to_state.attributes.friendly_name +
        '' has arrived at '' + trigger.to_state.state
        }}'
      lang: en-GB
      gend: female
leave_action:
  - service: script.personalert_audio
    data:
      entities: media_player.intercom_group
      mess: '{{ trigger.from_state.attributes.friendly_name +
        '' has left '' + trigger.from_state.state
        }}'
      lang: en-GB
      gend: female
jump_action:
  - service: script.personalert_audio
    data:
      entities: media_player.intercom_group
      mess: '{{ trigger.to_state.attributes.friendly_name +
        '' has left '' + trigger.from_state.state +
        '' and is located at: '' + trigger.to_state.state
        }}'
      lang: en-GB
      gend: female

# Script being called
script:
  personalert_audio:
    alias: Person alert BP TTS Message & Sound
    trace:
      stored_traces: 10
    fields:
      entities:
        name: Media Player
        description: Set the media player
        required: false
        selector:
          entity:
            multiple: true
            domain: media_player
      mess:
        name: Message
        description: This will set the message
        required: false
        example: "I'm lost"
        selector:
          text:
            multiline: true
            type: text
      lang:
        name: Language
        description:
          Language code. Has to be one that matches the integration used.
          Usually picked by the calling entity.
        required: false
        example: en-US
        selector:
          text:
            multiline: false
            type: text
      gend:
        name: Gender
        description:
          The genter, male or female, of the voice.
        required: false
        selector:
          select:
            options:
              - female
              - male
    variables:
        # Define variable data and provide default (change 'entities' 4 your system)
      entities: media_player.intercom_group
      mess: "I'm lost"
      lang: en-US
      gend: female


# Tying that all together, I thought I would share my complete BP call Automation here.
#   Notice I parallel the action groups, just because I can I guess, and notice that
#   it is running in single/silent mode. I tried other modes with mixed results.
#   Another thing to notice is I don't pass in variables to the script where the
#   defaults are what I want.

automation:
- id: 9db79068-535d-46dc-b737-d8864e6802f9
  alias: Ladies Alert Honitor
  description: Alert when the ladies of the house go places
  trace:
    stored_traces: 10
  use_blueprint:
    path: SirGoodenough/Person_Alert_Blueprint.yaml
    input:
      people2monitor:
      - person.julie
      - person.jen
      zone2monitor:
      - zone.home
      - zone.katy_s_kloset
      - zone.follicle_assembly_building
      - zone.feed_store
      - zone.nail_shop2
      - zone.belva
      - zone.clinic
      - zone.expo
      - zone.lakewood
      - zone.mountain
      - zone.shawano
      - zone.somerhome
      - zone.suring
      - zone.townsend
      enter_action:
      - parallel:
        - service: script.personalert_notify
          data:
            person: '{{ trigger.to_state.attributes.friendly_name }}'
            place_to: '{{ trigger.to_state.state }}'
            place_from: '{{ trigger.from_state.state }}'
            notify_id: '{{ trigger.to_state.context.id }}'
            phase: enter
        - service: script.personalert_audio
          data:
            mess: '{{ trigger.to_state.attributes.friendly_name + '' has arrived at
              '' + trigger.to_state.state }}'
            lang: en-GB
      leave_action:
      - parallel:
        - service: script.personalert_notify
          data:
            person: '{{ trigger.from_state.attributes.friendly_name }}'
            place_to: '{{ trigger.to_state.state }}'
            place_from: '{{ trigger.from_state.state }}'
            notify_id: '{{ trigger.from_state.context.id }}'
            phase: leave
        - service: script.personalert_audio
          data:
            mess: '{{ trigger.from_state.attributes.friendly_name + '' has left ''
              + trigger.from_state.state }}'
            lang: en-GB
      jump_action:
      - parallel:
        - service: script.personalert_notify
          data:
            person: '{{ trigger.to_state.attributes.friendly_name }}'
            place_to: '{{ trigger.to_state.state }}'
            place_from: '{{ trigger.from_state.state }}'
            notify_id: '{{ trigger.to_state.context.id }}'
            phase: jump
        - service: script.personalert_audio
          data:
            mess: '{{ trigger.to_state.attributes.friendly_name + '' has left '' +
              trigger.from_state.state + '' and is located at: '' + trigger.to_state.state
              }}'
            lang: en-GB
      enable_time: 05:30:18
      disable_time: '20:27:36'
      hold_period:
        hours: 0
        minutes: 5
        seconds: 0
  mode: single
  max_exceeded: silent
