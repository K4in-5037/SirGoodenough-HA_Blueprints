# Here is a way to push a persistant notification to your screen
#   that will sit for a short time.  It is taylored to be part of
#   my Person Alert BP but with slight tweaking it could be used
#   for a lot of things. 

# Add to 'enter_action' and/or 'leave_action' and/or 'jump_action' inputs:  (YAML Mode)
enter_action:
  - service: script.personalert_notify
    data:
      person: '{{ trigger.to_state.attributes.friendly_name }}'
      place_to: '{{ trigger.to_state.state }}'
      place_from: '{{ trigger.from_state.state }}'
      notify_id: '{{ trigger.to_state.context.id }}'
      phase: enter
leave_action:
  - service: script.personalert_notify
    data:
      person: '{{ trigger.from_state.attributes.friendly_name }}'
      place_to: '{{ trigger.to_state.state }}'
      place_from: '{{ trigger.from_state.state }}'
      notify_id: '{{ trigger.from_state.context.id }}'
      phase: leave
jump_action:
  - service: script.personalert_notify
    data:
      person: '{{ trigger.to_state.attributes.friendly_name }}'
      place_to: '{{ trigger.to_state.state }}'
      place_from: '{{ trigger.from_state.state }}'
      notify_id: '{{ trigger.to_state.context.id }}'
      phase: jump

# Script being called
script:
  personalert_notify:
    trace:
      stored_traces: 10
    alias: Person alert BP timed persistant_notification
    sequence:
    - alias: Notify interested parties with notification_id
      service: persistent_notification.create
      data:
        title: '{{ person + '' Status'' }}'
        message: >
          {{ 'Regarding: ' + person + '\n' + flip +
          '\n\nNotification_id: ' + notify_id }}
        notification_id: '{{ notify_id }}'
    - alias: Add a delay so notification stays up a while
        # Pick your display time. If you set 0 this notification doesn't show.
      delay:
        minutes: 2
    - alias: Kill the notification
      service: persistent_notification.dismiss
      data:
        notification_id: '{{ notify_id }}'
    variables:
        # Define variable data and provide defaults
      person: placeholder1
      place_to: placeholder2
      place_from: placeholder3
      notify_id: 3479f317-f314-43bb-9e20-d6168b14f78c
      phase: enter
      flip: >
        {% if phase == 'jump' %}
          'They have left: ' {{ place_from }} ' and are now located at: ' {{ place_to }}
        {% elif phase == 'leave' %} 
          'They have left: ' {{ place_from }}
        {% else %}
          'They are now located at: ' {{ place_to }}
        {% endif %}
    mode: single
    max_exceeded: silent
    icon: mdi:message-alert-outline



# Here is a way to push an audio message to your speakers
#   It is taylored to be part of my Person Alert BP but with slight 
#   tweaking it could be used for a lot of things. 
# The speaker entities entry needs to be a device on your network.
# This is set-up with tts.cloud_say using Nabu-Casa, but
#   tts.google_translate_say and others would also work at no cost.
# Note that 'lang' (Language) and 'gend' (gender) or 'entities'
#   (entity_ids of media players) does not have to be pushed if 
#   you don't want to change it from the defaults set in the script.

# Add to 'enter_action' and/or 'leave_action' and/or 'jump_action' inputs:  (YAML Mode)
enter_action:
  - service: script.personalert_audio
    data:
      entities: media_player.intercom_group
      mess: '{{ trigger.to_state.attributes.friendly_name +
        '' has arrived at '' + trigger.to_state.state
        }}'
      lang: en-GB
      gend: female
leave_action:
  - service: script.personalert_audio
    data:
      entities: media_player.intercom_group
      mess: '{{ trigger.from_state.attributes.friendly_name +
        '' has left '' + trigger.from_state.state
        }}'
      lang: en-GB
      gend: female
jump_action:
  - service: script.personalert_audio
    data:
      entities: media_player.intercom_group
      mess: '{{ trigger.to_state.attributes.friendly_name +
        '' has left '' + trigger.from_state.state +
        '' and is located at: '' + trigger.to_state.state
        }}'
      lang: en-GB
      gend: female

# Script being called
script:
  personalert_audio:
    trace:
      stored_traces: 10
    alias: Person alert BP TTS Message & Sound
    sequence:
    - alias: MP3 to Speakers
      service: media_player.play_media
      data:
        entity_id: "{{ entities }}"
        media_content_id:
          "media-source://media_source/local/mp3/OK_tone.wav"
        media_content_type: audio/mp3
    - delay: 00:00:02
    - alias: TTS script
      service: tts.cloud_say
      data:
        entity_id: "{{ entities }}"
        message: "{{ mess }}"
        language: "{{ lang }}"
        options:
          gender: "{{ gend }}"
    variables:
        # Define variable data and provide default (change 'entities' 4 your system)
      entities: media_player.intercom_group
      mess: "I'm lost"
      lang: en-US
      gend: female
    mode: single
    max_exceeded: silent
    icon: mdi:message-alert-outline



# Tying that all together, I thought I would share my complete BP call Automation here.
#   Notice I parallel the action groups, just because I can I guess, and notice that
#   it is running in single/silent mode.  I tried other modes with mixed results.
#   Another thing to notice is I don't pass in variables to the script where the
#   defaults are what I want.

automation:
- id: 9db79068-535d-46dc-b737-d8864e6802f9
  alias: Ladies Alert Honitor
  description: Alert when the ladies of the house go places
  trace:
    stored_traces: 10
  use_blueprint:
    path: SirGoodenough/Person_Alert_Blueprint.yaml
    input:
      people2monitor:
      - person.julie
      - person.jen
      zone2monitor:
      - zone.home
      - zone.katy_s_kloset
      - zone.follicle_assembly_building
      - zone.feed_store
      - zone.nail_shop2
      - zone.belva
      - zone.clinic
      - zone.expo
      - zone.lakewood
      - zone.mountain
      - zone.shawano
      - zone.somerhome
      - zone.suring
      - zone.townsend
      enter_action:
      - parallel:
        - service: script.personalert_notify
          data:
            person: '{{ trigger.to_state.attributes.friendly_name }}'
            place_to: '{{ trigger.to_state.state }}'
            place_from: '{{ trigger.from_state.state }}'
            notify_id: '{{ trigger.to_state.context.id }}'
            phase: enter
        - service: script.personalert_audio
          data:
            mess: '{{ trigger.to_state.attributes.friendly_name + '' has arrived at
              '' + trigger.to_state.state }}'
            lang: en-GB
      leave_action:
      - parallel:
        - service: script.personalert_notify
          data:
            person: '{{ trigger.from_state.attributes.friendly_name }}'
            place_to: '{{ trigger.to_state.state }}'
            place_from: '{{ trigger.from_state.state }}'
            notify_id: '{{ trigger.from_state.context.id }}'
            phase: leave
        - service: script.personalert_audio
          data:
            mess: '{{ trigger.from_state.attributes.friendly_name + '' has left ''
              + trigger.from_state.state }}'
            lang: en-GB
      jump_action:
      - parallel:
        - service: script.personalert_notify
          data:
            person: '{{ trigger.to_state.attributes.friendly_name }}'
            place_to: '{{ trigger.to_state.state }}'
            place_from: '{{ trigger.from_state.state }}'
            notify_id: '{{ trigger.to_state.context.id }}'
            phase: jump
        - service: script.personalert_audio
          data:
            mess: '{{ trigger.to_state.attributes.friendly_name + '' has left '' +
              trigger.from_state.state + '' and is located at: '' + trigger.to_state.state
              }}'
            lang: en-GB
      enable_time: 05:30:18
      disable_time: '20:27:36'
      hold_period:
        hours: 0
        minutes: 5
        seconds: 0
  mode: single
  max_exceeded: silent
