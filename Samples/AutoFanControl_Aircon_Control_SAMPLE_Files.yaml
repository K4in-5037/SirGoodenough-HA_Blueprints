# Here is how I and controlling my AirCon within the fan loop. 
#  I have a window unit that is WIFI enabled for Temperature and 
#  on/off. I set this up to only trigger to the AirCon unit when 
#  it actually needs to change something to avoid rate limiting 
#  situations.
#
# For this I employ scripts to provide some common code used in
#  the multiple automations. You can choose to move the actions I am
#  doing by calling scripts with data into this BP automation itself.
#  Just grab the script guts from 'aloas:' down and replace variables
#  with the values that were send with the original call.

# Added to the 'loop_action' (#11) selector:  (YAML Mode)
loop_action:
- alias: "Start AirCon only if off to prevent rate limit outages"
  if: '{{ states(''climate.gemodule5384_window_ac'') == ''off''
    and states(''binary_sensor.ac_enabled'') == true }}'
  then:
    service: script.bedroom_ac_start
- alias: Make sure the device is on before the temperature is set
  delay: 00:00:05
- alias: "Call bedroom ac set temperature & limit to prevent rate limit outages"
  if: '{{ is_number(state_attr(''climate.gemodule5384_window_ac'', ''temperature''))
    and state_attr(''climate.gemodule5384_window_ac'', ''temperature'') | float(73.1)
    != states(''input_number.bedroom_auto_temp'') | float(73.2)
    }}'
  then:
    service: script.bedroom_ac_set_temp
    data:
      Temp: '{{ states(''input_number.bedroom_auto_temp'') | float(73.3) }}'

# Added to the 'off_action' (#12) selector: (YAML Mode)
off_action:
- alias: call shut the AirCon down script
  service: script.bedroom_cooling_off


script:
# The AirCon on script looks like this:
#  I use this script for multiple instances of AC control...
  #####################################################
  # Bedroom AC Start                                  # 
  #####################################################
  bedroom_ac_start:
    alias: Bedroom AC Start
    sequence:
      - service: climate.turn_on
        target:
          entity_id: climate.gemodule5384

# And the script called to set the temperature looks like this.
#  I use this script for multiple instances of AC control...
  #####################################################
  # Bedroom AC Set Temperature                        # 
  #  Looks for the variable 'Temp' to be passed in    #
  #   'Temp' is a float between 45 and 95 Â°F          #
  #####################################################
  bedroom_ac_set_temp:
    variables:
      Temp:
    alias: Bedroom AC Set Temperature
    sequence:
      - service: climate.set_temperature
        data:
          entity_id: climate.gemodule5384
          temperature: '{{ Temp }}'

# And the script called to shut it down looks like this. 
#  I use this script for multiple instances of AC control...
  #####################################################
  # Bedroom Cooling Off                               # 
  #####################################################
  bedroom_cooling_off:
    alias: Bedroom Cooling OFF
    sequence:
      - alias: Stop the AirCon
        service: climate.turn_off
        target:
          entity_id: climate.gemodule5384
